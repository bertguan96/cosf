// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.4
// source: cosf/cosf.proto

package cosf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CosfService_HealthCheck_FullMethodName = "/cosf.CosfService/HealthCheck"
	CosfService_AllocateQPS_FullMethodName = "/cosf.CosfService/AllocateQPS"
	CosfService_Download_FullMethodName    = "/cosf.CosfService/Download"
)

// CosfServiceClient is the client API for CosfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosfServiceClient interface {
	// HealthCheck 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// AllocateQPS 申请QPS
	AllocateQPS(ctx context.Context, in *AllocateQPSRequest, opts ...grpc.CallOption) (*AllocateQPSResponse, error)
	// Download 下载文件
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
}

type cosfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCosfServiceClient(cc grpc.ClientConnInterface) CosfServiceClient {
	return &cosfServiceClient{cc}
}

func (c *cosfServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, CosfService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosfServiceClient) AllocateQPS(ctx context.Context, in *AllocateQPSRequest, opts ...grpc.CallOption) (*AllocateQPSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocateQPSResponse)
	err := c.cc.Invoke(ctx, CosfService_AllocateQPS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosfServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, CosfService_Download_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosfServiceServer is the server API for CosfService service.
// All implementations must embed UnimplementedCosfServiceServer
// for forward compatibility.
type CosfServiceServer interface {
	// HealthCheck 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// AllocateQPS 申请QPS
	AllocateQPS(context.Context, *AllocateQPSRequest) (*AllocateQPSResponse, error)
	// Download 下载文件
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	mustEmbedUnimplementedCosfServiceServer()
}

// UnimplementedCosfServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCosfServiceServer struct{}

func (UnimplementedCosfServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedCosfServiceServer) AllocateQPS(context.Context, *AllocateQPSRequest) (*AllocateQPSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateQPS not implemented")
}
func (UnimplementedCosfServiceServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedCosfServiceServer) mustEmbedUnimplementedCosfServiceServer() {}
func (UnimplementedCosfServiceServer) testEmbeddedByValue()                     {}

// UnsafeCosfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosfServiceServer will
// result in compilation errors.
type UnsafeCosfServiceServer interface {
	mustEmbedUnimplementedCosfServiceServer()
}

func RegisterCosfServiceServer(s grpc.ServiceRegistrar, srv CosfServiceServer) {
	// If the following call pancis, it indicates UnimplementedCosfServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CosfService_ServiceDesc, srv)
}

func _CosfService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosfServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CosfService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosfServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosfService_AllocateQPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateQPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosfServiceServer).AllocateQPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CosfService_AllocateQPS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosfServiceServer).AllocateQPS(ctx, req.(*AllocateQPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosfService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosfServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CosfService_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosfServiceServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CosfService_ServiceDesc is the grpc.ServiceDesc for CosfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CosfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosf.CosfService",
	HandlerType: (*CosfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _CosfService_HealthCheck_Handler,
		},
		{
			MethodName: "AllocateQPS",
			Handler:    _CosfService_AllocateQPS_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _CosfService_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosf/cosf.proto",
}
